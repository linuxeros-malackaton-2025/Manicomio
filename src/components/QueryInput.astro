---
/*
  Componente QueryInput.astro
  - Campo de texto para consultas en lenguaje natural → SQL
  - Dispara evento 'sql-generated' cuando se genera SQL
*/
---

<div class="panel">
  <label>Consulta en lenguaje natural</label>
  <input id="nl" type="text" placeholder="Ej: Pacientes de Andalucía" />
  <div class="buttons">
    <button id="convertBtn">Convertir (LLM mock)</button>
    <button id="clearBtn" class="secondary">Limpiar</button>
  </div>
</div>

<style>
.panel { 
  padding: 1rem; 
  background: var(--card); 
  border-radius: 10px; 
}

label { 
  display: block; 
  font-size: 13px; 
  color: var(--muted); 
  margin-bottom: 8px; 
}

input { 
  width: 100%; 
  padding: 10px; 
  border-radius: 8px; 
  border: 1px solid rgba(255,255,255,0.1); 
  background: transparent; 
  color: inherit; 
}

.buttons { 
  margin-top: 10px; 
  display: flex; 
  gap: 8px; 
}

button { 
  background: var(--accent); 
  border: 0; 
  border-radius: 8px; 
  padding: 8px 12px; 
  color: white; 
  cursor: pointer; 
}

button.secondary { 
  background: transparent; 
  border: 1px solid var(--muted); 
  color: var(--muted); 
}
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const nlInput = document.getElementById('nl');
    const convertBtn = document.getElementById('convertBtn');
    const clearBtn = document.getElementById('clearBtn');

    if (!nlInput || !convertBtn || !clearBtn) return;

    convertBtn.addEventListener('click', async () => {
      const nl = nlInput.value.trim();
      if (!nl) return;

      convertBtn.disabled = true;
      const originalText = convertBtn.textContent;
      convertBtn.textContent = 'Convirtiendo...';

      try {
        // 1) Pedir al backend que convierta NL -> SQL
        const genResp = await fetch('/api/generateQueryFromNL', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({query: nl })
        });
        const genData = await genResp.json();
        if (!genResp.ok) {
          throw new Error(genData?.error || 'Error al generar SQL');
        }

        const sql = genData?.sql;
        if (!sql) {
          throw new Error('El servidor no devolvió SQL');
        }

        // Emitir SQL generado para que otros componentes (ej. editor) lo muestren
        window.dispatchEvent(new CustomEvent('sql-generated', { detail: sql }));

        // 2) Ejecutar el SQL generado en el endpoint que consulta la BD
        convertBtn.textContent = 'Consultando...';
        const resp = await fetch('/api/queryDB', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sql })
        });

        const data = await resp.json();
        if (!resp.ok) {
          throw new Error(data?.error || 'Error en la consulta SQL');
        }

        // Soportar formato { rows: [...] } o un array directo
        const rows = Array.isArray(data) ? data : (data && data.rows) ? data.rows : [];

        // Emitir resultado para la app
        window.dispatchEvent(new CustomEvent('sql-result', { detail: { nl, sql, rows } }));
      } catch (err) {
        const message = err?.message ?? String(err);
        window.dispatchEvent(new CustomEvent('sql-error', { detail: { nl, message } }));
        console.error('Error conversión/consulta:', message);
      } finally {
        convertBtn.disabled = false;
        convertBtn.textContent = originalText;
      }
    });

    // Limpiar input
    clearBtn.addEventListener('click', () => {
      nlInput.value = '';
    });
  });
</script>